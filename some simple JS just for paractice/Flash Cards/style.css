* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}
body {
  background: #333;
  color: wheat;
  text-align: center;
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  height: 100vh;
}
/* The 3D space  */
section {
  width: 300px;
  height: 300px;
  border: 2px solid wheat;
  margin: 40px 0;
  /* An element’s perspective only applies to direct descendant children, in this case .card. In order for subsequent children to inherit a parent’s perspective, and live in the same 3D space, the parent can pass along its perspective with transform-style: preserve-3d. Without 3D transform-style, the faces of the card would be flattened with its parents, and the back face’s rotation would be nullified. */
  perspective: 600px;
}
/* https://3dtransforms.desandro.com/card-flip */
/* 3d object  */
.cards {
  width: 100%;
  height: 100%;
  transition: transform 1s;
  transform-style: preserve-3d;
  position: relative;
}
.card.is-flipped {
  transform: rotateY(180deg);
}
.card {
  /* need to reset their positions in 2D with position: absolute. In order to hide the back-side of the faces when they are faced away from the viewer, we use backface-visibility: hidden. */
  position: absolute;
  width: 100%;
  height: 100%;
  line-height: 260px;
  color: wheat;
  text-align: center;
  font-weight: bold;
  font-size: 40px;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}
.card.front {
  background: red;
}
.card.back {
  background: blue;
  /* To flip .back, we add a basic 3D transform of rotateY(180deg). */
  transform: rotateY(180deg);
}

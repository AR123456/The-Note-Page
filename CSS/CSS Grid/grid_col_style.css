.grid {
  display: grid;
  /* specify how many columns and their width */
  /* if items in grid exceed num colums will wrap to next line */
  grid-template-columns: 200px 200px 200px;
  /* putting auto in the middle will stetch the middle column to fit width of the container*/
  grid-template-columns: 200px auto 200px;
  /* this will make col all the same size to fit container width */
  grid-template-columns: auto auto auto;
  /* better way to write repeditive grid-template columns */
  /* use repeat() it takes in the number of times to repeat and column widht */
  grid-template-columns: repeat(3, auto);
  /* can use %, px or most commonly fr unit 
  https://www.w3.org/TR/css3-grid-layout/#fr-unit
  it is a fraction of the page and simmilar to the flex 1, 2, ect property */
  grid-template-columns: 1fr 2fr 1fr;
  /* can use grid-gap instead of margin for space between
  The gap CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap.
   */
  gap: 1rem;
}

.item {
  padding: 3rem;
  border: #ccc 1px solid;
  background: #f4f4f4;
  font-size: 1.3rem;
  font-weight: bold;
  text-align: center;
}

/* for main area and sidebar  main is the parent of the section aside  */
main {
  display: grid;
  /* section is 2fr aside is 1fr  */
  grid-template-columns: 3fr 1fr;
  gap: 1.5rem;
  margin-top: 2rem;
}
